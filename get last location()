package com.example.maps

import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.location.Geocoder
import android.location.LocationManager
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.os.Looper
import android.util.Log
import android.widget.Toast
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.google.android.gms.location.*
import com.google.android.gms.maps.model.LatLng
import kotlinx.android.synthetic.main.activity_main.*
import java.util.*

class MainActivity : AppCompatActivity() {

    // variable that we need
    lateinit var fusedLocationProviderClient: FusedLocationProviderClient
    lateinit var locationRequest: LocationRequest

    // just a unique number
    var PERMISSION_ID = 1000

    var Latitude: Double = 0.0
    var Longitude: Double = 0.0

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // initial lateinit var
        fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this)
        buttonGetLocation.setOnClickListener{
            getLastLoacation()
        }

        buttonMaps.setOnClickListener{
            val intent = Intent(this, MapsActivity::class.java)
            intent.putExtra("LATITUDE", Latitude)
            intent.putExtra("LONGITUDE", Longitude)
            startActivity(intent)

        }
    }

    // get last location
    private fun getLastLoacation() {
        // check permission
        if (checkPermission()) {
            // check location services is enable
            if (isLocationEnable()) {
                // get the location
                fusedLocationProviderClient.lastLocation.addOnCompleteListener { task ->
                    var location = task.result
                    if (location == null) {
                        getNewLocation()
                    } else {
                        Latitude = location.latitude
                        Longitude = location.longitude
                        textViewLocation.text =
                            "Your Current Cordinate Are " +
                                    "\nLat: $Latitude" +
                                    "\nLong: $Longitude" +
                                    "\nCountryName: ${getCountryName(location.latitude, location.longitude)}" +
                                    "\nCityName: ${getCityName(location.latitude, location.longitude)}"
                    }
                }
            } else {
                Toast.makeText(this, "Please Enable Your Location Services", Toast.LENGTH_SHORT)
                    .show()
            }
        } else {
            requestPermission()
        }
    }

    // get new location
    private fun getNewLocation() {
        locationRequest = LocationRequest()
        locationRequest.priority = LocationRequest.PRIORITY_HIGH_ACCURACY
        locationRequest.interval = 0
        locationRequest.fastestInterval = 0
        locationRequest.numUpdates = 2
        checkPermission()
        fusedLocationProviderClient.requestLocationUpdates(locationRequest, locationCallBack, Looper.myLooper())
    }

    // get city name
    private fun getCityName(lat: Double, long: Double): String{
        var cityName = ""
        var geoCoder = Geocoder(this, Locale.getDefault())
        var address = geoCoder.getFromLocation(lat, long, 1)
        cityName = address.get(0).locality
        return cityName
    }

    private fun getCountryName(lat: Double, long: Double): String{
        var countryName = ""
        var geoCoder = Geocoder(this, Locale.getDefault())
        var address = geoCoder.getFromLocation(lat, long, 1)
        countryName = address.get(0).countryName
        return countryName
    }
    private val locationCallBack = object : LocationCallback() {
        override fun onLocationResult(p0: LocationResult) {
            var lastLocation = p0.lastLocation
            Latitude = lastLocation.latitude
            Longitude = lastLocation.longitude
            textViewLocation.text =
                "Your Current Cordinate Are " +
                        "\nLat: $Latitude" +
                        "\nLong: $Longitude" +
                        "\nCountryName: ${getCountryName(Latitude, Longitude)}" +
                        "\nCityName: ${getCityName(Latitude, Longitude)}"
        }
    }

    // check uses permission
    private fun checkPermission(): Boolean {
        if (
            ContextCompat.checkSelfPermission(
                this,
                android.Manifest.permission.ACCESS_FINE_LOCATION
            ) == PackageManager.PERMISSION_GRANTED ||
            ContextCompat.checkSelfPermission(
                this,
                android.Manifest.permission.ACCESS_COARSE_LOCATION
            ) == PackageManager.PERMISSION_GRANTED
        ) {
            return true
        }
        return false
    }

    // request get user permission
    private fun requestPermission() {
        ActivityCompat.requestPermissions(
            this,
            arrayOf(
                android.Manifest.permission.ACCESS_FINE_LOCATION,
                android.Manifest.permission.ACCESS_COARSE_LOCATION
            ),
            PERMISSION_ID
        )
    }

    // check if location services is enable
    private fun isLocationEnable(): Boolean {
        var locationManager = getSystemService(Context.LOCATION_SERVICE) as LocationManager
        return locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER) ||
                locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        // super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        // built in function that check permission result
        if (requestCode == PERMISSION_ID) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Log.d("Debug: ", "You have he permission")
            }
        }
    }
}
